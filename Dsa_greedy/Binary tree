//Given the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
int Noflevel(TreeNode* root){
    if(root==NULL) return 0;
    return 1+max(Noflevel(root->left),Noflevel(root->right));
}
void nthlevel(TreeNode* root,int cur,int level,vector<int> &a){
    if(root==NULL) return;
    if(cur==level){
        a.push_back(root->val);
        return;
    }
    nthlevel(root->left,cur+1,level,a);
    nthlevel(root->right,cur+1,level,a);
}
void lorder(TreeNode* root,vector<vector<int>>& ans){
    int n=Noflevel(root);
    for(int i=1;i<=n;i++){
        vector<int> a;
        nthlevel(root,1,i,a);
        ans.push_back(a);
    }
}
vector<vector<int>> levelOrder(TreeNode* root) {
      vector<vector<int>> ans;
      lorder(root,ans);
      return ans;
    }
};
